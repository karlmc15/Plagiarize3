import sys
import argparse
import subprocess
from time import time
import colorama
from colorama import Fore, Back, Style

import split
import stem
import keywords

def colour_print(text, colour = Fore.WHITE, back = Back.BLACK):
	print(colour + back + str(text) + Style.RESET_ALL)

PROGRAM_START = time()

#Command line parsing info
parser = argparse.ArgumentParser(description = "Making a statistics about a pdf or txt file.")
parser.add_argument("-p", "--pdf", nargs = 1, help = "Path to pdf file" ''', metavar = "\"*.pdf\""''')
parser.add_argument("-t", "--txt", nargs = 1, help = "Path to txt file" ''', metavar = "\"*.txt\""''')
parser.add_argument("-s", "--stopwords", nargs = 1, help = "Path to a file with stopwords")
parser.add_argument("-l", "--language", nargs = 1, help = "Specifies a language for a text or PDF document", metavar = "RUS/ENG")
parser.add_argument("-o", "--output", nargs = 1, help = "Path to output file")

if (len(sys.argv) <= 1):
	print(parser.print_help())
	exit(0)

args = parser.parse_args(sys.argv[1:])

if (args.pdf != None) and (args.txt != None):
	print("Error in arguments! Only one argument can be specified at the same time:", "pdf filename or txt filename")
	colour_print("Exiting", colour = Fore.RED)
	exit(0)

if (args.pdf == None) and (args.txt == None):
	print("No file to parse was specified!")
	colour_print("Exiting", colour = Fore.RED)
	exit(0)

if (args.txt != None):
	input_file = args.txt[0]
else:
	input_file = args.pdf[0] + ".txt"

if (args.stopwords != None):
	stopwords_file = args.stopwords[0]
else:
	stopwords_file = ""

if (args.output != None):
	output_file = args.output[0]
else:
	output_file = ""

lemmatizer = 0

languages = set({"RUS", "ENG"})
if (args.language != None and (args.language[0] in languages)):
	language = args.language[0]
	if (language == "RUS"):
		lemmatizer = stem.lemmatize_ru
	elif (language == "ENG"):
		lemmatizer = stem.lemmatize_en
	else:
	    lemmatizer = None
else:
	lemmatizer = None

print("input_file =", input_file)
print("stopwords_file =", stopwords_file)
print("output_file =", output_file)
#colour_print("input_file = {0}".format(input_file), back = Back.GREEN)
#colour_print("stopwords_file = {0}".format(stopwords_file), back = Back.GREEN)
#colour_print("output_file = {0}".format(output_file), back = Back.GREEN)


#Getting text from PDF file, saving it to /path/to/pdf/NAME.pdf.txt
if (args.pdf != None):
	print("\nStarted parsing PDF, wait for a while...")
	pdf = args.pdf[0]
	start_time = time()
	try:
		retcode = subprocess.call(["python", "./pdf_import.py", pdf, pdf + ".txt"])
		if (retcode != 0):
			#print("Error while parsing PDF file!")
			colour_print("Error while parsing PDF file!", core = Fore.RED)
			exit(1)

		end_time = time()
		print("Parsing PDF took {0:.3f}".format(end_time - start_time), "seconds")

	except OSError:
		print("Error while trying to parse pdf file!")
		exit(1)

#Getting words from a txt file
print("\nStarted parsing TXT, wait for a while...")
start_time = time()
#text = split.get_list(input_file, enableComments = False)
text = split.get_text(input_file)
end_time = time()
print("Parsing TXT took {0:.3f}".format(end_time - start_time), "seconds")

#Getting words for deleting
if (stopwords_file == ''):
	stopwords = set()
	pass
else:
	#print("\nStarted parsing TXT with stopwords, wait for a while...")
	start_time = time()
	stopwords = split.get_list(stopwords_file, enableComments = True)
	end_time = time()
	print("\nParsing TXT with stopwords took {0:.3f}".format(end_time - start_time), "seconds")
	stopwords = set(stopwords)

print("\nStarted getting keyword phrases")
start_time = time()
keywords = keywords.getKeyPhrases(text, stopwords, lemmatizer = lemmatizer)
end_time = time()
print("Getting keyword phrases took {0:.3f}".format(end_time - start_time), "seconds")

if (output_file == ''):
	print("\nKeywords (generated by RAKE):\n")
	for key in keywords:
		print(key[0])
else:
	out = open(output_file, "w")
	for key in keywords:
		out.write("{0}\n".format(key[0]))
	out.close()

PROGRAM_END = time()
print("\nProgram ended successfully!\nExecution time {0:.3f} seconds".format(PROGRAM_END - PROGRAM_START))
