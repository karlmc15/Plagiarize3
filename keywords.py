import re
import sys
import operator

from nltk.tokenize import word_tokenize, wordpunct_tokenize, sent_tokenize
import split

def generateCandidateKeywords(text, garbage, lemmatizer = None):
	'''
	Generating candidate keywords
	'''
	str = text.lower()
	candidate_keywords = []
	tmplist = []
	for sent in sent_tokenize(str):
		for word in word_tokenize(sent):
			#Lemmatizing words, if needed
			if (lemmatizer != None):
				word = lemmatizer(word)

			if (word in split.delimeters or word in garbage):
				if (len(tmplist) != 0):
					candidate_keywords.append(tmplist)
				tmplist = []
			else:
				tmplist.append(word)

	return candidate_keywords

def generateStringFromList(list):
	'''
	Generating a string from a list to make hashable type
	'''
	string = ""
	for i in range(len(list) - 1):
		string += list[i] + " "
	string += list[len(list) - 1]
	return string

def calculateWordScores(list):
	'''
	Calculate Word Scores for a list of candidate keywords
	'''
	wordfreq = {}
	worddegree = {}

	for wordlist in list:
		degree = len(wordlist) - 1
		for word in wordlist:
			worddegree.setdefault(word, 0)
			worddegree[word] += degree
			wordfreq.setdefault(word, 0)
			wordfreq[word] += 1
	for word in wordfreq:
		worddegree[word] += wordfreq[word]

	wordscore = {}
	wordscore = {word : worddegree[word]/wordfreq[word] for word in wordfreq}
	return wordscore

def generateKeywords(list, wordscore):
	'''
	Genetating keyword phrases by calculating RAKE Score
	'''
	keywords = {}
	for phraseList in list:
		phrase = generateStringFromList(phraseList)
		score = 0
		for word in phraseList:
			score += wordscore[word]
			#phrase += word + " "
		keywords.setdefault(phrase, 0)
		keywords[phrase] = score
	return keywords

def getKeyPhrases(text, garbage, lemmatizer = None):
	'''
	Getting keywords phrases, generated by RAKE Score Algorythm
	'''
	if (lemmatizer == None):
		candidates = generateCandidateKeywords(text, garbage)
	else:
		candidates = generateCandidateKeywords(text, garbage, lemmatizer)
	score = calculateWordScores(candidates)
	keywords = generateKeywords(candidates, score)

	keywords_quantity = int(len(keywords) / 3)

	#keyPhrases = sorted(keywords.items(), key=lambda x: (x[1],x[0]), reverse=True)
	keyPhrases = sorted(iter(keywords.items()), key=operator.itemgetter(1), reverse=True)
	if (keywords_quantity == 0):
		return keyPhrases
	else:
		return keyPhrases[0:keywords_quantity]
